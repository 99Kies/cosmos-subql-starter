specVersion: 1.0.0
name: neutron-subql-starter
version: 0.0.1
runner:
  node:
    name: "@subql/node-cosmos"
    version: "*"
  query:
    name: "@subql/query"
    version: "*"
description: >-
  This project can be use as a starting point for developing your Cosmos (Neutron) based SubQuery project
repository: "https://github.com/subquery/cosmos-subql-starter"
schema:
  file: ./schema.graphql
network:
  chainId: neutron-1
  # This endpoint must be a public non-pruned archive node
  # Public nodes may be rate limited, which can affect indexing speed
  # When developing your project we suggest getting a private API key
  endpoint:
    [
      "https://rpc-kralum.neutron-1.neutron.org",
      "https://neutron-rpc.lavenderfive.com",
      "https://rpc-neutron.whispernode.com",
    ]
  # Optionally provide the HTTP endpoint of a full chain dictionary to speed up processing
  # dictionary: "https://api.subquery.network/sq/subquery/cosmos-neutron-dictionary"
  # chainTypes: # This feature allows support for any Cosmos chain by importing the correct protobuf messages
  # cosmwasm.wasm.v1.MsgSetContractMetadata:
  # file: ./proto/archway/rewards/v1/tx.proto
  # messages:
  #- MsgSetContractMetadata
dataSources:
  - kind: cosmos/Runtime
    startBlock: 1437614 # The first airdrop claim was on this block
    mapping:
      file: ./dist/index.js
      handlers:
        # Using block handlers slows your project down as they can be executed with each and every block. Only use if you need to
        # - handler: handleBlock
        #   kind: cosmos/BlockHandler
        # Using transaction handlers without filters slows your project down as they can be executed with each and every block
        # - handler: handleTransaction
        #   kind: cosmos/TransactionHandler
        # - handler: handleEvent
        #   kind: cosmos/EventHandler
        #   filter:
        #     type: "/cosmwasm.wasm.v1.MsgExecuteContract"
        # contractCall field can be specified here too
        # values: # A set of key/value pairs that are present in the message data
        # contract: "juno1v99ehkuetkpf0yxdry8ce92yeqaeaa7lyxr2aagkesrw67wcsn8qxpxay0"
        - handler: handleAirdropClaim
          kind: cosmos/MessageHandler
          filter:
            # Filter to only messages with the MsgSetContractMetadata function call
            # e.g. https://www.mintscan.io/neutron/txs/156FE31585BD75E06EE337CEA908C37EA0434CC49943B4860E7AABE2475B6B01?height=1437614
            type: "/cosmwasm.wasm.v1.MsgExecuteContract"
            contractCall: "claim"
            values: # A set of key/value pairs that are present in the message data
              # This is the neutron airdrop contract
              contract: "neutron198sxsrjvt2v2lln2ajn82ks76k97mj72mtgl7309jehd0vy8rezs7e6c56"
